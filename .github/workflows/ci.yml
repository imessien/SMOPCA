name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - python-version: 3.9
            scipy-version: '1.10.0'
          - python-version: 3.9
            scipy-version: '1.13.0'
          - python-version: 3.10
            scipy-version: '1.10.0'
          - python-version: 3.10
            scipy-version: '1.13.0'
          - python-version: 3.10
            scipy-version: '1.16.0'
          - python-version: 3.11
            scipy-version: '1.13.0'
          - python-version: 3.11
            scipy-version: '1.16.0'
          - python-version: 3.12
            scipy-version: '1.13.0'
          - python-version: 3.12
            scipy-version: '1.16.0'
      fail-fast: false

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Test with specific SciPy version
      run: |
        # Try to install the specific SciPy version
        pip install scipy==${{ matrix.scipy-version }} || {
          echo "SciPy ${{ matrix.scipy-version }} not available for Python ${{ matrix.python-version }}"
          echo "Installing latest compatible SciPy version"
          pip install scipy
        }
        python -c "import scipy; print(f'SciPy version: {scipy.__version__}')"
    
    - name: Run tests
      run: |
        python -c "
        import numpy as np
        from src.model import SMOPCA
        
        # Create test data
        np.random.seed(42)
        n_cells = 50
        n_genes = 100
        pos = np.random.rand(n_cells, 2)
        Y1 = np.random.rand(n_genes, n_cells)
        Y2 = np.random.rand(50, n_cells)
        
        # Test SMOPCA initialization
        smopca = SMOPCA([Y1, Y2], pos, Z_dim=10)
        print('✓ SMOPCA initialization successful')
        
        # Test kernel building
        smopca.buildKernel(length_scale=1.0)
        print('✓ Kernel building successful')
        
        # Test parameter estimation
        smopca.estimateParams(
            iterations_gamma=1, 
            iterations_sigma_W=1, 
            sigma_init_list=[1.0, 1.0], 
            sigma_xtol_list=[1e-3, 1e-3],
            estimate_gamma=False
        )
        print('✓ Parameter estimation successful')
        
        # Test posterior calculation
        Z = smopca.calculatePosterior()
        print(f'✓ Posterior calculation successful, Z shape: {Z.shape}')
        print('All tests passed!')
        "
    
    - name: Test import
      run: |
        python -c "from src.model import SMOPCA; print('Import successful')"

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Run flake8
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82,F401,F901 --show-source --statistics --max-line-length=120
    
    - name: Check code formatting with black
      run: |
        black --check src/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only src/

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
